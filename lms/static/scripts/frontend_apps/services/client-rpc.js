import { Server, call as rpcCall } from '../../postmessage_json_rpc';

/**
 * @typedef User
 * @prop {string} displayName
 * @prop {string} userid
 */

/**
 * Service for communicating with the Hypothesis client.
 *
 * This service handles:
 *
 *  - Waiting for the Hypothesis client to request its configuration and then
 *    returning the configuration data generated by the LMS backend to the
 *    client.
 *  - Updating the Hypothesis client configuration in response to input
 *    in the LMS frontend, such as changing the focused user in grading mode.
 */
export class ClientRpc {
  /**
   * Setup the RPC server used to communicate with the Hypothesis client.
   *
   * @param {Object} options
   *   @param {string[]} options.allowedOrigins -
   *     Origins that are allowed to request client configuration
   *   @param {Object} options.clientConfig -
   *     Configuration for the Hypothesis client. Whatever is provided here is
   *     passed directly to the client via `window.postMessage` when it requests
   *     configuration. It should be a subset of the config options specified at
   *     https://h.readthedocs.io/projects/client/en/latest/publishers/config/.
   */
  constructor({ allowedOrigins, clientConfig }) {
    this._server = new Server(allowedOrigins);

    /**
     * Methods that are remotely callable by JSON-RPC over postMessage.
     *
     * Methods that can be remotely called by clients using our
     * JSON-RPC-over-postMessage server (postmessage_json_rpc/server/server.js) are
     * defined in one place in this module.
     */

    /**
     * Config request RPC handler.
     */
    this._server.register('requestConfig', () => clientConfig);

    /**
     * Section groups RPC handler.
     *
     * In the case where groups are not available at load time, the groups must
     * be fetched asynchronously using the api values found in the js-config
     * object. In order to speed this up even more, the groups are pre-loaded
     * before this RPC endpoint (`requestGroups`) is queried -- This method
     * simply returns an awaited promise to the client.
     *
     */
    const groupsPromise = new Promise(resolve => {
      // This promise is resolved in BasicLtiLaunchApp after the
      // api request returns the groups.
      this._resolveGroupFetch = resolve;
    });

    this._server.register('requestGroups', async () => {
      return await groupsPromise;
    });
  }

  /**
   * Set which groups are available to select in the client.
   *
   * This method should be called exactly once during the LTI launch and calling
   * it a second time will have no effect.
   *
   * @param {string[]} groups
   */
  setGroups(groups) {
    this._resolveGroupFetch(groups);
  }

  /**
   * Set which user is focused in the client.
   *
   * @param {User|null} user
   */
  async setFocusedUser(user) {
    const sidebar = await this._server.sidebarWindow;
    rpcCall(sidebar.frame, sidebar.origin, 'changeFocusModeUser', [
      {
        // Passing `undefined` as the `username` disables focus mode in the client.
        //
        // TODO: The `username` property is deprecated in the client and should be
        // changed to `userid` once the client no longer references `username`.
        username: user ? user.userid : undefined,
        displayName: user ? user.displayName : undefined,
      },
    ]);
  }
}
